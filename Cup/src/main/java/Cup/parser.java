package Cup;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\010\000\002\003\006\000\002\003\006" +
    "\000\002\004\006\000\002\004\010\000\002\004\010\000" +
    "\002\004\007\000\002\004\003\000\002\004\007\000\002" +
    "\004\011\000\002\004\011\000\002\004\010\000\002\004" +
    "\004\000\002\005\003\000\002\005\005\000\002\006\003" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\007\007\000\002\007" +
    "\011\000\002\010\006\000\002\010\006\000\002\010\010" +
    "\000\002\010\007\000\002\010\007\000\002\010\006\000" +
    "\002\010\003\000\002\010\007\000\002\010\007\000\002" +
    "\010\011\000\002\010\010\000\002\010\010\000\002\010" +
    "\007\000\002\010\004\000\002\011\003\000\002\011\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\010\007\004\034\007\042\006\001\002\000" +
    "\006\010\020\011\021\001\002\000\004\002\016\001\002" +
    "\000\010\007\004\034\007\042\006\001\002\000\004\015" +
    "\010\001\002\000\004\035\011\001\002\000\004\016\012" +
    "\001\002\000\004\005\013\001\002\000\010\007\004\034" +
    "\007\042\006\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002\000\010\007" +
    "\004\034\007\042\006\001\002\000\004\012\137\001\002" +
    "\000\004\012\022\001\002\000\020\017\024\022\025\025" +
    "\032\030\031\031\026\033\023\042\027\001\002\000\004" +
    "\020\133\001\002\000\004\020\127\001\002\000\004\013" +
    "\113\001\002\000\004\013\057\001\002\000\022\004\uffde" +
    "\017\024\022\025\025\032\030\031\031\026\033\023\042" +
    "\027\001\002\000\004\004\055\001\002\000\004\020\041" +
    "\001\002\000\004\020\033\001\002\000\006\026\034\027" +
    "\035\001\002\000\004\005\uffd6\001\002\000\004\005\uffd5" +
    "\001\002\000\004\005\037\001\002\000\022\004\uffe3\017" +
    "\024\022\025\025\032\030\031\031\026\033\023\042\027" +
    "\001\002\000\004\004\uffdc\001\002\000\004\013\042\001" +
    "\002\000\004\035\043\001\002\000\006\014\ufff1\021\053" +
    "\001\002\000\004\014\051\001\002\000\004\014\046\001" +
    "\002\000\004\005\047\001\002\000\020\017\024\022\025" +
    "\025\032\030\031\031\026\033\023\042\027\001\002\000" +
    "\004\004\uffdb\001\002\000\004\005\052\001\002\000\004" +
    "\004\uffe2\001\002\000\004\035\043\001\002\000\004\014" +
    "\ufff0\001\002\000\010\007\ufffc\034\ufffc\042\ufffc\001\002" +
    "\000\004\004\uffd7\001\002\000\006\006\062\015\060\001" +
    "\002\000\004\006\076\001\002\000\004\014\073\001\002" +
    "\000\016\014\uffef\016\uffef\036\064\037\065\040\063\041" +
    "\066\001\002\000\006\006\062\015\060\001\002\000\006" +
    "\006\062\015\060\001\002\000\006\006\062\015\060\001" +
    "\002\000\006\006\062\015\060\001\002\000\006\014\uffeb" +
    "\016\uffeb\001\002\000\006\014\uffed\016\uffed\001\002\000" +
    "\006\014\uffee\016\uffee\001\002\000\006\014\uffec\016\uffec" +
    "\001\002\000\004\005\074\001\002\000\022\004\uffe1\017" +
    "\024\022\025\025\032\030\031\031\026\033\023\042\027" +
    "\001\002\000\004\004\uffda\001\002\000\012\036\100\037" +
    "\101\040\077\041\102\001\002\000\006\006\062\015\060" +
    "\001\002\000\006\006\062\015\060\001\002\000\006\006" +
    "\062\015\060\001\002\000\006\006\062\015\060\001\002" +
    "\000\004\016\104\001\002\000\006\014\uffe7\016\uffe7\001" +
    "\002\000\004\016\106\001\002\000\006\014\uffe9\016\uffe9" +
    "\001\002\000\004\016\110\001\002\000\006\014\uffea\016" +
    "\uffea\001\002\000\004\016\112\001\002\000\006\014\uffe8" +
    "\016\uffe8\001\002\000\004\012\114\001\002\000\004\006" +
    "\121\001\002\000\004\014\116\001\002\000\004\005\117" +
    "\001\002\000\022\004\uffe0\017\024\022\025\025\032\030" +
    "\031\031\026\033\023\042\027\001\002\000\004\004\uffd9" +
    "\001\002\000\004\021\122\001\002\000\004\006\123\001" +
    "\002\000\004\004\124\001\002\000\006\014\uffe6\021\125" +
    "\001\002\000\004\012\114\001\002\000\004\014\uffe5\001" +
    "\002\000\004\035\130\001\002\000\004\005\131\001\002" +
    "\000\022\004\uffe4\017\024\022\025\025\032\030\031\031" +
    "\026\033\023\042\027\001\002\000\004\004\uffdd\001\002" +
    "\000\004\035\134\001\002\000\004\005\135\001\002\000" +
    "\022\004\uffdf\017\024\022\025\025\032\030\031\031\026" +
    "\033\023\042\027\001\002\000\004\004\uffd8\001\002\000" +
    "\014\017\140\022\141\023\144\024\143\042\142\001\002" +
    "\000\004\020\171\001\002\000\004\013\164\001\002\000" +
    "\016\004\ufff7\017\140\022\141\023\144\024\143\042\142" +
    "\001\002\000\004\020\155\001\002\000\004\020\147\001" +
    "\002\000\004\004\146\001\002\000\010\007\ufffd\034\ufffd" +
    "\042\ufffd\001\002\000\004\013\150\001\002\000\004\035" +
    "\043\001\002\000\004\014\152\001\002\000\004\005\153" +
    "\001\002\000\016\004\ufffa\017\140\022\141\023\144\024" +
    "\143\042\142\001\002\000\004\004\ufff5\001\002\000\004" +
    "\013\156\001\002\000\006\006\062\015\060\001\002\000" +
    "\004\014\160\001\002\000\004\005\161\001\002\000\016" +
    "\004\ufff9\017\140\022\141\023\144\024\143\042\142\001" +
    "\002\000\004\004\ufff4\001\002\000\004\004\ufff2\001\002" +
    "\000\004\012\114\001\002\000\004\014\166\001\002\000" +
    "\004\005\167\001\002\000\016\004\ufff8\017\140\022\141" +
    "\023\144\024\143\042\142\001\002\000\004\004\ufff3\001" +
    "\002\000\004\035\172\001\002\000\004\005\173\001\002" +
    "\000\016\004\ufffb\017\140\022\141\023\144\024\143\042" +
    "\142\001\002\000\004\004\ufff6\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\004\002\004\001\001\000\004\003\016\001" +
    "\001\000\002\001\001\000\004\002\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\044\012\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\071\001\001\000\004\006\070\001\001" +
    "\000\004\006\067\001\001\000\004\006\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\110\001\001" +
    "\000\004\006\106\001\001\000\004\006\104\001\001\000" +
    "\004\006\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\135\001\001\000\002\001\001\000\004\004" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\173\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int aaa;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= DEF A s 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= COMENTARIO s 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= EJECUTAR APERTURAPARENTESIS INFO CIERREPARENTESIS PUNTOYCOMA s 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= BARRA APERTURALLAVE B CIERRELLAVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= PIE APERTURALLAVE F CIERRELLAVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= TITULO DOSPUNTOS INFO PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= EJEX DOSPUNTOS APERTURACORCHETE C CIERRECORCHETE PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= EJEY DOSPUNTOS APERTURACORCHETE D CIERRECORCHETE PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // B ::= UNIR APERTURACORCHETE E CIERRECORCHETE PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // B ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // B ::= TITULO DOSPUNTOS INFO PUNTOYCOMA B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // B ::= EJEX DOSPUNTOS APERTURACORCHETE C CIERRECORCHETE PUNTOYCOMA B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // B ::= EJEY DOSPUNTOS APERTURACORCHETE D CIERRECORCHETE PUNTOYCOMA B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // B ::= UNIR APERTURACORCHETE E CIERRECORCHETE PUNTOYCOMA B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // B ::= COMENTARIO B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= INFO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= INFO COMA C 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // D ::= NUMEROENTERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // D ::= NUMEROENTERO MAS D 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // D ::= NUMEROENTERO MENOS D 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // D ::= NUMEROENTERO MULTIPLICACION D 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // D ::= NUMEROENTERO DIVICION D 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // D ::= APERTURAPARENTESIS NUMEROENTERO MAS D CIERREPARENTESIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D ::= APERTURAPARENTESIS NUMEROENTERO MENOS D CIERREPARENTESIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // D ::= APERTURAPARENTESIS NUMEROENTERO MULTIPLICACION D CIERREPARENTESIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // D ::= APERTURAPARENTESIS NUMEROENTERO DIVICION D CIERREPARENTESIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= APERTURALLAVE NUMEROENTERO COMA NUMEROENTERO CIERRELLAVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= APERTURALLAVE NUMEROENTERO COMA NUMEROENTERO CIERRELLAVE COMA E 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // F ::= TITULO DOSPUNTOS INFO PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F ::= TIPO DOSPUNTOS G PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // F ::= ETIQUETA DOSPUNTOS APERTURACORCHETE H CIERRECORCHETE PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // F ::= VALORES APERTURACORCHETE D CIERRECORCHETE PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // F ::= UNIR APERTURACORCHETE E CIERRECORCHETE PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // F ::= EXTRA DOSPUNTOS INFO PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // F ::= COMENTARIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // F ::= TITULO DOSPUNTOS INFO PUNTOYCOMA F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // F ::= TIPO DOSPUNTOS G PUNTOYCOMA F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // F ::= ETIQUETA DOSPUNTOS APERTURACORCHETE C CIERRECORCHETE PUNTOYCOMA F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // F ::= VALORES APERTURACORCHETE D CIERRECORCHETE PUNTOYCOMA F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F ::= UNIR APERTURACORCHETE E CIERRECORCHETE PUNTOYCOMA F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= EXTRA DOSPUNTOS INFO PUNTOYCOMA F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // F ::= COMENTARIO F 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // G ::= CANTIDAD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // G ::= PORCENTAJE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
